// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/speedrun-hq/speedrun/api/models"
	mock "github.com/stretchr/testify/mock"
)

// NewFulfillmentServiceMock creates a new instance of FulfillmentServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFulfillmentServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FulfillmentServiceMock {
	mock := &FulfillmentServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FulfillmentServiceMock is an autogenerated mock type for the FulfillmentService type
type FulfillmentServiceMock struct {
	mock.Mock
}

type FulfillmentServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FulfillmentServiceMock) EXPECT() *FulfillmentServiceMock_Expecter {
	return &FulfillmentServiceMock_Expecter{mock: &_m.Mock}
}

// CreateFulfillment provides a mock function for the type FulfillmentServiceMock
func (_mock *FulfillmentServiceMock) CreateFulfillment(ctx context.Context, id string, txHash string) error {
	ret := _mock.Called(ctx, id, txHash)

	if len(ret) == 0 {
		panic("no return value specified for CreateFulfillment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, txHash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FulfillmentServiceMock_CreateFulfillment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFulfillment'
type FulfillmentServiceMock_CreateFulfillment_Call struct {
	*mock.Call
}

// CreateFulfillment is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - txHash string
func (_e *FulfillmentServiceMock_Expecter) CreateFulfillment(ctx interface{}, id interface{}, txHash interface{}) *FulfillmentServiceMock_CreateFulfillment_Call {
	return &FulfillmentServiceMock_CreateFulfillment_Call{Call: _e.mock.On("CreateFulfillment", ctx, id, txHash)}
}

func (_c *FulfillmentServiceMock_CreateFulfillment_Call) Run(run func(ctx context.Context, id string, txHash string)) *FulfillmentServiceMock_CreateFulfillment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FulfillmentServiceMock_CreateFulfillment_Call) Return(err error) *FulfillmentServiceMock_CreateFulfillment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FulfillmentServiceMock_CreateFulfillment_Call) RunAndReturn(run func(ctx context.Context, id string, txHash string) error) *FulfillmentServiceMock_CreateFulfillment_Call {
	_c.Call.Return(run)
	return _c
}

// GetFulfillment provides a mock function for the type FulfillmentServiceMock
func (_mock *FulfillmentServiceMock) GetFulfillment(ctx context.Context, id string) (*models.Fulfillment, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFulfillment")
	}

	var r0 *models.Fulfillment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Fulfillment, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Fulfillment); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Fulfillment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FulfillmentServiceMock_GetFulfillment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFulfillment'
type FulfillmentServiceMock_GetFulfillment_Call struct {
	*mock.Call
}

// GetFulfillment is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *FulfillmentServiceMock_Expecter) GetFulfillment(ctx interface{}, id interface{}) *FulfillmentServiceMock_GetFulfillment_Call {
	return &FulfillmentServiceMock_GetFulfillment_Call{Call: _e.mock.On("GetFulfillment", ctx, id)}
}

func (_c *FulfillmentServiceMock_GetFulfillment_Call) Run(run func(ctx context.Context, id string)) *FulfillmentServiceMock_GetFulfillment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FulfillmentServiceMock_GetFulfillment_Call) Return(fulfillment *models.Fulfillment, err error) *FulfillmentServiceMock_GetFulfillment_Call {
	_c.Call.Return(fulfillment, err)
	return _c
}

func (_c *FulfillmentServiceMock_GetFulfillment_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Fulfillment, error)) *FulfillmentServiceMock_GetFulfillment_Call {
	_c.Call.Return(run)
	return _c
}
