// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ethereum/go-ethereum/ethclient"
	mock "github.com/stretchr/testify/mock"
)

// NewClientResolverMock creates a new instance of ClientResolverMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientResolverMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientResolverMock {
	mock := &ClientResolverMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientResolverMock is an autogenerated mock type for the ClientResolver type
type ClientResolverMock struct {
	mock.Mock
}

type ClientResolverMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientResolverMock) EXPECT() *ClientResolverMock_Expecter {
	return &ClientResolverMock_Expecter{mock: &_m.Mock}
}

// GetClient provides a mock function for the type ClientResolverMock
func (_mock *ClientResolverMock) GetClient(chainID uint64) (*ethclient.Client, error) {
	ret := _mock.Called(chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *ethclient.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint64) (*ethclient.Client, error)); ok {
		return returnFunc(chainID)
	}
	if returnFunc, ok := ret.Get(0).(func(uint64) *ethclient.Client); ok {
		r0 = returnFunc(chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ethclient.Client)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = returnFunc(chainID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientResolverMock_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type ClientResolverMock_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
//   - chainID uint64
func (_e *ClientResolverMock_Expecter) GetClient(chainID interface{}) *ClientResolverMock_GetClient_Call {
	return &ClientResolverMock_GetClient_Call{Call: _e.mock.On("GetClient", chainID)}
}

func (_c *ClientResolverMock_GetClient_Call) Run(run func(chainID uint64)) *ClientResolverMock_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ClientResolverMock_GetClient_Call) Return(client *ethclient.Client, err error) *ClientResolverMock_GetClient_Call {
	_c.Call.Return(client, err)
	return _c
}

func (_c *ClientResolverMock_GetClient_Call) RunAndReturn(run func(chainID uint64) (*ethclient.Client, error)) *ClientResolverMock_GetClient_Call {
	_c.Call.Return(run)
	return _c
}
