// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/speedrun-hq/speedrun/api/models"
	mock "github.com/stretchr/testify/mock"
)

// NewIntentServiceMock creates a new instance of IntentServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntentServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntentServiceMock {
	mock := &IntentServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IntentServiceMock is an autogenerated mock type for the IntentService type
type IntentServiceMock struct {
	mock.Mock
}

type IntentServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *IntentServiceMock) EXPECT() *IntentServiceMock_Expecter {
	return &IntentServiceMock_Expecter{mock: &_m.Mock}
}

// CreateIntent provides a mock function for the type IntentServiceMock
func (_mock *IntentServiceMock) CreateIntent(ctx context.Context, id string, sourceChain uint64, destinationChain uint64, token string, amount string, recipient string, sender string, intentFee string, timestamp ...time.Time) (*models.Intent, error) {
	var tmpRet mock.Arguments
	if len(timestamp) > 0 {
		tmpRet = _mock.Called(ctx, id, sourceChain, destinationChain, token, amount, recipient, sender, intentFee, timestamp)
	} else {
		tmpRet = _mock.Called(ctx, id, sourceChain, destinationChain, token, amount, recipient, sender, intentFee)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateIntent")
	}

	var r0 *models.Intent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, string, string, string, string, string, ...time.Time) (*models.Intent, error)); ok {
		return returnFunc(ctx, id, sourceChain, destinationChain, token, amount, recipient, sender, intentFee, timestamp...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, string, string, string, string, string, ...time.Time) *models.Intent); ok {
		r0 = returnFunc(ctx, id, sourceChain, destinationChain, token, amount, recipient, sender, intentFee, timestamp...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uint64, uint64, string, string, string, string, string, ...time.Time) error); ok {
		r1 = returnFunc(ctx, id, sourceChain, destinationChain, token, amount, recipient, sender, intentFee, timestamp...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntentServiceMock_CreateIntent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIntent'
type IntentServiceMock_CreateIntent_Call struct {
	*mock.Call
}

// CreateIntent is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - sourceChain uint64
//   - destinationChain uint64
//   - token string
//   - amount string
//   - recipient string
//   - sender string
//   - intentFee string
//   - timestamp ...time.Time
func (_e *IntentServiceMock_Expecter) CreateIntent(ctx interface{}, id interface{}, sourceChain interface{}, destinationChain interface{}, token interface{}, amount interface{}, recipient interface{}, sender interface{}, intentFee interface{}, timestamp ...interface{}) *IntentServiceMock_CreateIntent_Call {
	return &IntentServiceMock_CreateIntent_Call{Call: _e.mock.On("CreateIntent",
		append([]interface{}{ctx, id, sourceChain, destinationChain, token, amount, recipient, sender, intentFee}, timestamp...)...)}
}

func (_c *IntentServiceMock_CreateIntent_Call) Run(run func(ctx context.Context, id string, sourceChain uint64, destinationChain uint64, token string, amount string, recipient string, sender string, intentFee string, timestamp ...time.Time)) *IntentServiceMock_CreateIntent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 uint64
		if args[3] != nil {
			arg3 = args[3].(uint64)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		var arg7 string
		if args[7] != nil {
			arg7 = args[7].(string)
		}
		var arg8 string
		if args[8] != nil {
			arg8 = args[8].(string)
		}
		var arg9 []time.Time
		var variadicArgs []time.Time
		if len(args) > 9 {
			variadicArgs = args[9].([]time.Time)
		}
		arg9 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
			arg9...,
		)
	})
	return _c
}

func (_c *IntentServiceMock_CreateIntent_Call) Return(intent *models.Intent, err error) *IntentServiceMock_CreateIntent_Call {
	_c.Call.Return(intent, err)
	return _c
}

func (_c *IntentServiceMock_CreateIntent_Call) RunAndReturn(run func(ctx context.Context, id string, sourceChain uint64, destinationChain uint64, token string, amount string, recipient string, sender string, intentFee string, timestamp ...time.Time) (*models.Intent, error)) *IntentServiceMock_CreateIntent_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntent provides a mock function for the type IntentServiceMock
func (_mock *IntentServiceMock) GetIntent(ctx context.Context, id string) (*models.Intent, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetIntent")
	}

	var r0 *models.Intent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Intent, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Intent); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntentServiceMock_GetIntent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntent'
type IntentServiceMock_GetIntent_Call struct {
	*mock.Call
}

// GetIntent is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *IntentServiceMock_Expecter) GetIntent(ctx interface{}, id interface{}) *IntentServiceMock_GetIntent_Call {
	return &IntentServiceMock_GetIntent_Call{Call: _e.mock.On("GetIntent", ctx, id)}
}

func (_c *IntentServiceMock_GetIntent_Call) Run(run func(ctx context.Context, id string)) *IntentServiceMock_GetIntent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IntentServiceMock_GetIntent_Call) Return(intent *models.Intent, err error) *IntentServiceMock_GetIntent_Call {
	_c.Call.Return(intent, err)
	return _c
}

func (_c *IntentServiceMock_GetIntent_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Intent, error)) *IntentServiceMock_GetIntent_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntentsByRecipient provides a mock function for the type IntentServiceMock
func (_mock *IntentServiceMock) GetIntentsByRecipient(ctx context.Context, recipient string) ([]*models.Intent, error) {
	ret := _mock.Called(ctx, recipient)

	if len(ret) == 0 {
		panic("no return value specified for GetIntentsByRecipient")
	}

	var r0 []*models.Intent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*models.Intent, error)); ok {
		return returnFunc(ctx, recipient)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*models.Intent); ok {
		r0 = returnFunc(ctx, recipient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, recipient)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntentServiceMock_GetIntentsByRecipient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntentsByRecipient'
type IntentServiceMock_GetIntentsByRecipient_Call struct {
	*mock.Call
}

// GetIntentsByRecipient is a helper method to define mock.On call
//   - ctx context.Context
//   - recipient string
func (_e *IntentServiceMock_Expecter) GetIntentsByRecipient(ctx interface{}, recipient interface{}) *IntentServiceMock_GetIntentsByRecipient_Call {
	return &IntentServiceMock_GetIntentsByRecipient_Call{Call: _e.mock.On("GetIntentsByRecipient", ctx, recipient)}
}

func (_c *IntentServiceMock_GetIntentsByRecipient_Call) Run(run func(ctx context.Context, recipient string)) *IntentServiceMock_GetIntentsByRecipient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IntentServiceMock_GetIntentsByRecipient_Call) Return(intents []*models.Intent, err error) *IntentServiceMock_GetIntentsByRecipient_Call {
	_c.Call.Return(intents, err)
	return _c
}

func (_c *IntentServiceMock_GetIntentsByRecipient_Call) RunAndReturn(run func(ctx context.Context, recipient string) ([]*models.Intent, error)) *IntentServiceMock_GetIntentsByRecipient_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntentsBySender provides a mock function for the type IntentServiceMock
func (_mock *IntentServiceMock) GetIntentsBySender(ctx context.Context, sender string) ([]*models.Intent, error) {
	ret := _mock.Called(ctx, sender)

	if len(ret) == 0 {
		panic("no return value specified for GetIntentsBySender")
	}

	var r0 []*models.Intent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*models.Intent, error)); ok {
		return returnFunc(ctx, sender)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*models.Intent); ok {
		r0 = returnFunc(ctx, sender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, sender)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntentServiceMock_GetIntentsBySender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntentsBySender'
type IntentServiceMock_GetIntentsBySender_Call struct {
	*mock.Call
}

// GetIntentsBySender is a helper method to define mock.On call
//   - ctx context.Context
//   - sender string
func (_e *IntentServiceMock_Expecter) GetIntentsBySender(ctx interface{}, sender interface{}) *IntentServiceMock_GetIntentsBySender_Call {
	return &IntentServiceMock_GetIntentsBySender_Call{Call: _e.mock.On("GetIntentsBySender", ctx, sender)}
}

func (_c *IntentServiceMock_GetIntentsBySender_Call) Run(run func(ctx context.Context, sender string)) *IntentServiceMock_GetIntentsBySender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IntentServiceMock_GetIntentsBySender_Call) Return(intents []*models.Intent, err error) *IntentServiceMock_GetIntentsBySender_Call {
	_c.Call.Return(intents, err)
	return _c
}

func (_c *IntentServiceMock_GetIntentsBySender_Call) RunAndReturn(run func(ctx context.Context, sender string) ([]*models.Intent, error)) *IntentServiceMock_GetIntentsBySender_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntents provides a mock function for the type IntentServiceMock
func (_mock *IntentServiceMock) ListIntents(ctx context.Context) ([]*models.Intent, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListIntents")
	}

	var r0 []*models.Intent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*models.Intent, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*models.Intent); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntentServiceMock_ListIntents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntents'
type IntentServiceMock_ListIntents_Call struct {
	*mock.Call
}

// ListIntents is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IntentServiceMock_Expecter) ListIntents(ctx interface{}) *IntentServiceMock_ListIntents_Call {
	return &IntentServiceMock_ListIntents_Call{Call: _e.mock.On("ListIntents", ctx)}
}

func (_c *IntentServiceMock_ListIntents_Call) Run(run func(ctx context.Context)) *IntentServiceMock_ListIntents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IntentServiceMock_ListIntents_Call) Return(intents []*models.Intent, err error) *IntentServiceMock_ListIntents_Call {
	_c.Call.Return(intents, err)
	return _c
}

func (_c *IntentServiceMock_ListIntents_Call) RunAndReturn(run func(ctx context.Context) ([]*models.Intent, error)) *IntentServiceMock_ListIntents_Call {
	_c.Call.Return(run)
	return _c
}
