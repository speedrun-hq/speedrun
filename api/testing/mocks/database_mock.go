// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"database/sql"
	"time"

	"github.com/speedrun-hq/speedrun/api/models"
	mock "github.com/stretchr/testify/mock"
)

// NewDatabaseMock creates a new instance of DatabaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseMock {
	mock := &DatabaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DatabaseMock is an autogenerated mock type for the Database type
type DatabaseMock struct {
	mock.Mock
}

type DatabaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DatabaseMock) EXPECT() *DatabaseMock_Expecter {
	return &DatabaseMock_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DatabaseMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DatabaseMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DatabaseMock_Expecter) Close() *DatabaseMock_Close_Call {
	return &DatabaseMock_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DatabaseMock_Close_Call) Run(run func()) *DatabaseMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseMock_Close_Call) Return(err error) *DatabaseMock_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DatabaseMock_Close_Call) RunAndReturn(run func() error) *DatabaseMock_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFulfillment provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) CreateFulfillment(ctx context.Context, fulfillment *models.Fulfillment) error {
	ret := _mock.Called(ctx, fulfillment)

	if len(ret) == 0 {
		panic("no return value specified for CreateFulfillment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Fulfillment) error); ok {
		r0 = returnFunc(ctx, fulfillment)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DatabaseMock_CreateFulfillment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFulfillment'
type DatabaseMock_CreateFulfillment_Call struct {
	*mock.Call
}

// CreateFulfillment is a helper method to define mock.On call
//   - ctx context.Context
//   - fulfillment *models.Fulfillment
func (_e *DatabaseMock_Expecter) CreateFulfillment(ctx interface{}, fulfillment interface{}) *DatabaseMock_CreateFulfillment_Call {
	return &DatabaseMock_CreateFulfillment_Call{Call: _e.mock.On("CreateFulfillment", ctx, fulfillment)}
}

func (_c *DatabaseMock_CreateFulfillment_Call) Run(run func(ctx context.Context, fulfillment *models.Fulfillment)) *DatabaseMock_CreateFulfillment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Fulfillment
		if args[1] != nil {
			arg1 = args[1].(*models.Fulfillment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DatabaseMock_CreateFulfillment_Call) Return(err error) *DatabaseMock_CreateFulfillment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DatabaseMock_CreateFulfillment_Call) RunAndReturn(run func(ctx context.Context, fulfillment *models.Fulfillment) error) *DatabaseMock_CreateFulfillment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIntent provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) CreateIntent(ctx context.Context, intent *models.Intent) error {
	ret := _mock.Called(ctx, intent)

	if len(ret) == 0 {
		panic("no return value specified for CreateIntent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Intent) error); ok {
		r0 = returnFunc(ctx, intent)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DatabaseMock_CreateIntent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIntent'
type DatabaseMock_CreateIntent_Call struct {
	*mock.Call
}

// CreateIntent is a helper method to define mock.On call
//   - ctx context.Context
//   - intent *models.Intent
func (_e *DatabaseMock_Expecter) CreateIntent(ctx interface{}, intent interface{}) *DatabaseMock_CreateIntent_Call {
	return &DatabaseMock_CreateIntent_Call{Call: _e.mock.On("CreateIntent", ctx, intent)}
}

func (_c *DatabaseMock_CreateIntent_Call) Run(run func(ctx context.Context, intent *models.Intent)) *DatabaseMock_CreateIntent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Intent
		if args[1] != nil {
			arg1 = args[1].(*models.Intent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DatabaseMock_CreateIntent_Call) Return(err error) *DatabaseMock_CreateIntent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DatabaseMock_CreateIntent_Call) RunAndReturn(run func(ctx context.Context, intent *models.Intent) error) *DatabaseMock_CreateIntent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSettlement provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) CreateSettlement(ctx context.Context, settlement *models.Settlement) error {
	ret := _mock.Called(ctx, settlement)

	if len(ret) == 0 {
		panic("no return value specified for CreateSettlement")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Settlement) error); ok {
		r0 = returnFunc(ctx, settlement)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DatabaseMock_CreateSettlement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSettlement'
type DatabaseMock_CreateSettlement_Call struct {
	*mock.Call
}

// CreateSettlement is a helper method to define mock.On call
//   - ctx context.Context
//   - settlement *models.Settlement
func (_e *DatabaseMock_Expecter) CreateSettlement(ctx interface{}, settlement interface{}) *DatabaseMock_CreateSettlement_Call {
	return &DatabaseMock_CreateSettlement_Call{Call: _e.mock.On("CreateSettlement", ctx, settlement)}
}

func (_c *DatabaseMock_CreateSettlement_Call) Run(run func(ctx context.Context, settlement *models.Settlement)) *DatabaseMock_CreateSettlement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Settlement
		if args[1] != nil {
			arg1 = args[1].(*models.Settlement)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DatabaseMock_CreateSettlement_Call) Return(err error) *DatabaseMock_CreateSettlement_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DatabaseMock_CreateSettlement_Call) RunAndReturn(run func(ctx context.Context, settlement *models.Settlement) error) *DatabaseMock_CreateSettlement_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) Exec(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type DatabaseMock_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *DatabaseMock_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *DatabaseMock_Exec_Call {
	return &DatabaseMock_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *DatabaseMock_Exec_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *DatabaseMock_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *DatabaseMock_Exec_Call) Return(result sql.Result, err error) *DatabaseMock_Exec_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *DatabaseMock_Exec_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) (sql.Result, error)) *DatabaseMock_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// GetFulfillment provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) GetFulfillment(ctx context.Context, id string) (*models.Fulfillment, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFulfillment")
	}

	var r0 *models.Fulfillment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Fulfillment, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Fulfillment); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Fulfillment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_GetFulfillment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFulfillment'
type DatabaseMock_GetFulfillment_Call struct {
	*mock.Call
}

// GetFulfillment is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *DatabaseMock_Expecter) GetFulfillment(ctx interface{}, id interface{}) *DatabaseMock_GetFulfillment_Call {
	return &DatabaseMock_GetFulfillment_Call{Call: _e.mock.On("GetFulfillment", ctx, id)}
}

func (_c *DatabaseMock_GetFulfillment_Call) Run(run func(ctx context.Context, id string)) *DatabaseMock_GetFulfillment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DatabaseMock_GetFulfillment_Call) Return(fulfillment *models.Fulfillment, err error) *DatabaseMock_GetFulfillment_Call {
	_c.Call.Return(fulfillment, err)
	return _c
}

func (_c *DatabaseMock_GetFulfillment_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Fulfillment, error)) *DatabaseMock_GetFulfillment_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntent provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) GetIntent(ctx context.Context, id string) (*models.Intent, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetIntent")
	}

	var r0 *models.Intent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Intent, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Intent); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_GetIntent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntent'
type DatabaseMock_GetIntent_Call struct {
	*mock.Call
}

// GetIntent is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *DatabaseMock_Expecter) GetIntent(ctx interface{}, id interface{}) *DatabaseMock_GetIntent_Call {
	return &DatabaseMock_GetIntent_Call{Call: _e.mock.On("GetIntent", ctx, id)}
}

func (_c *DatabaseMock_GetIntent_Call) Run(run func(ctx context.Context, id string)) *DatabaseMock_GetIntent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DatabaseMock_GetIntent_Call) Return(intent *models.Intent, err error) *DatabaseMock_GetIntent_Call {
	_c.Call.Return(intent, err)
	return _c
}

func (_c *DatabaseMock_GetIntent_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Intent, error)) *DatabaseMock_GetIntent_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastProcessedBlock provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) GetLastProcessedBlock(ctx context.Context, chainID uint64) (uint64, error) {
	ret := _mock.Called(ctx, chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProcessedBlock")
	}

	var r0 uint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) (uint64, error)); ok {
		return returnFunc(ctx, chainID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) uint64); ok {
		r0 = returnFunc(ctx, chainID)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = returnFunc(ctx, chainID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_GetLastProcessedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastProcessedBlock'
type DatabaseMock_GetLastProcessedBlock_Call struct {
	*mock.Call
}

// GetLastProcessedBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - chainID uint64
func (_e *DatabaseMock_Expecter) GetLastProcessedBlock(ctx interface{}, chainID interface{}) *DatabaseMock_GetLastProcessedBlock_Call {
	return &DatabaseMock_GetLastProcessedBlock_Call{Call: _e.mock.On("GetLastProcessedBlock", ctx, chainID)}
}

func (_c *DatabaseMock_GetLastProcessedBlock_Call) Run(run func(ctx context.Context, chainID uint64)) *DatabaseMock_GetLastProcessedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DatabaseMock_GetLastProcessedBlock_Call) Return(v uint64, err error) *DatabaseMock_GetLastProcessedBlock_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *DatabaseMock_GetLastProcessedBlock_Call) RunAndReturn(run func(ctx context.Context, chainID uint64) (uint64, error)) *DatabaseMock_GetLastProcessedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettlement provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) GetSettlement(ctx context.Context, id string) (*models.Settlement, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSettlement")
	}

	var r0 *models.Settlement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Settlement, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Settlement); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Settlement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_GetSettlement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettlement'
type DatabaseMock_GetSettlement_Call struct {
	*mock.Call
}

// GetSettlement is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *DatabaseMock_Expecter) GetSettlement(ctx interface{}, id interface{}) *DatabaseMock_GetSettlement_Call {
	return &DatabaseMock_GetSettlement_Call{Call: _e.mock.On("GetSettlement", ctx, id)}
}

func (_c *DatabaseMock_GetSettlement_Call) Run(run func(ctx context.Context, id string)) *DatabaseMock_GetSettlement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DatabaseMock_GetSettlement_Call) Return(settlement *models.Settlement, err error) *DatabaseMock_GetSettlement_Call {
	_c.Call.Return(settlement, err)
	return _c
}

func (_c *DatabaseMock_GetSettlement_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Settlement, error)) *DatabaseMock_GetSettlement_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalFulfilledAmount provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) GetTotalFulfilledAmount(ctx context.Context, intentID string) (string, error) {
	ret := _mock.Called(ctx, intentID)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalFulfilledAmount")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, intentID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, intentID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, intentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_GetTotalFulfilledAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalFulfilledAmount'
type DatabaseMock_GetTotalFulfilledAmount_Call struct {
	*mock.Call
}

// GetTotalFulfilledAmount is a helper method to define mock.On call
//   - ctx context.Context
//   - intentID string
func (_e *DatabaseMock_Expecter) GetTotalFulfilledAmount(ctx interface{}, intentID interface{}) *DatabaseMock_GetTotalFulfilledAmount_Call {
	return &DatabaseMock_GetTotalFulfilledAmount_Call{Call: _e.mock.On("GetTotalFulfilledAmount", ctx, intentID)}
}

func (_c *DatabaseMock_GetTotalFulfilledAmount_Call) Run(run func(ctx context.Context, intentID string)) *DatabaseMock_GetTotalFulfilledAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DatabaseMock_GetTotalFulfilledAmount_Call) Return(s string, err error) *DatabaseMock_GetTotalFulfilledAmount_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *DatabaseMock_GetTotalFulfilledAmount_Call) RunAndReturn(run func(ctx context.Context, intentID string) (string, error)) *DatabaseMock_GetTotalFulfilledAmount_Call {
	_c.Call.Return(run)
	return _c
}

// InitDB provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) InitDB(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InitDB")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DatabaseMock_InitDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitDB'
type DatabaseMock_InitDB_Call struct {
	*mock.Call
}

// InitDB is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) InitDB(ctx interface{}) *DatabaseMock_InitDB_Call {
	return &DatabaseMock_InitDB_Call{Call: _e.mock.On("InitDB", ctx)}
}

func (_c *DatabaseMock_InitDB_Call) Run(run func(ctx context.Context)) *DatabaseMock_InitDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DatabaseMock_InitDB_Call) Return(err error) *DatabaseMock_InitDB_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DatabaseMock_InitDB_Call) RunAndReturn(run func(ctx context.Context) error) *DatabaseMock_InitDB_Call {
	_c.Call.Return(run)
	return _c
}

// ListFulfillments provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListFulfillments(ctx context.Context) ([]*models.Fulfillment, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListFulfillments")
	}

	var r0 []*models.Fulfillment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*models.Fulfillment, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*models.Fulfillment); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Fulfillment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_ListFulfillments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFulfillments'
type DatabaseMock_ListFulfillments_Call struct {
	*mock.Call
}

// ListFulfillments is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) ListFulfillments(ctx interface{}) *DatabaseMock_ListFulfillments_Call {
	return &DatabaseMock_ListFulfillments_Call{Call: _e.mock.On("ListFulfillments", ctx)}
}

func (_c *DatabaseMock_ListFulfillments_Call) Run(run func(ctx context.Context)) *DatabaseMock_ListFulfillments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListFulfillments_Call) Return(fulfillments []*models.Fulfillment, err error) *DatabaseMock_ListFulfillments_Call {
	_c.Call.Return(fulfillments, err)
	return _c
}

func (_c *DatabaseMock_ListFulfillments_Call) RunAndReturn(run func(ctx context.Context) ([]*models.Fulfillment, error)) *DatabaseMock_ListFulfillments_Call {
	_c.Call.Return(run)
	return _c
}

// ListFulfillmentsPaginated provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListFulfillmentsPaginated(ctx context.Context, page int, pageSize int) ([]*models.Fulfillment, int, error) {
	ret := _mock.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListFulfillmentsPaginated")
	}

	var r0 []*models.Fulfillment
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Fulfillment, int, error)); ok {
		return returnFunc(ctx, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*models.Fulfillment); ok {
		r0 = returnFunc(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Fulfillment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListFulfillmentsPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFulfillmentsPaginated'
type DatabaseMock_ListFulfillmentsPaginated_Call struct {
	*mock.Call
}

// ListFulfillmentsPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
func (_e *DatabaseMock_Expecter) ListFulfillmentsPaginated(ctx interface{}, page interface{}, pageSize interface{}) *DatabaseMock_ListFulfillmentsPaginated_Call {
	return &DatabaseMock_ListFulfillmentsPaginated_Call{Call: _e.mock.On("ListFulfillmentsPaginated", ctx, page, pageSize)}
}

func (_c *DatabaseMock_ListFulfillmentsPaginated_Call) Run(run func(ctx context.Context, page int, pageSize int)) *DatabaseMock_ListFulfillmentsPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListFulfillmentsPaginated_Call) Return(fulfillments []*models.Fulfillment, n int, err error) *DatabaseMock_ListFulfillmentsPaginated_Call {
	_c.Call.Return(fulfillments, n, err)
	return _c
}

func (_c *DatabaseMock_ListFulfillmentsPaginated_Call) RunAndReturn(run func(ctx context.Context, page int, pageSize int) ([]*models.Fulfillment, int, error)) *DatabaseMock_ListFulfillmentsPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// ListFulfillmentsPaginatedOptimized provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListFulfillmentsPaginatedOptimized(ctx context.Context, page int, pageSize int) ([]*models.Fulfillment, int, error) {
	ret := _mock.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListFulfillmentsPaginatedOptimized")
	}

	var r0 []*models.Fulfillment
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Fulfillment, int, error)); ok {
		return returnFunc(ctx, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*models.Fulfillment); ok {
		r0 = returnFunc(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Fulfillment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListFulfillmentsPaginatedOptimized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFulfillmentsPaginatedOptimized'
type DatabaseMock_ListFulfillmentsPaginatedOptimized_Call struct {
	*mock.Call
}

// ListFulfillmentsPaginatedOptimized is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
func (_e *DatabaseMock_Expecter) ListFulfillmentsPaginatedOptimized(ctx interface{}, page interface{}, pageSize interface{}) *DatabaseMock_ListFulfillmentsPaginatedOptimized_Call {
	return &DatabaseMock_ListFulfillmentsPaginatedOptimized_Call{Call: _e.mock.On("ListFulfillmentsPaginatedOptimized", ctx, page, pageSize)}
}

func (_c *DatabaseMock_ListFulfillmentsPaginatedOptimized_Call) Run(run func(ctx context.Context, page int, pageSize int)) *DatabaseMock_ListFulfillmentsPaginatedOptimized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListFulfillmentsPaginatedOptimized_Call) Return(fulfillments []*models.Fulfillment, n int, err error) *DatabaseMock_ListFulfillmentsPaginatedOptimized_Call {
	_c.Call.Return(fulfillments, n, err)
	return _c
}

func (_c *DatabaseMock_ListFulfillmentsPaginatedOptimized_Call) RunAndReturn(run func(ctx context.Context, page int, pageSize int) ([]*models.Fulfillment, int, error)) *DatabaseMock_ListFulfillmentsPaginatedOptimized_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntents provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListIntents(ctx context.Context) ([]*models.Intent, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListIntents")
	}

	var r0 []*models.Intent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*models.Intent, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*models.Intent); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_ListIntents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntents'
type DatabaseMock_ListIntents_Call struct {
	*mock.Call
}

// ListIntents is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) ListIntents(ctx interface{}) *DatabaseMock_ListIntents_Call {
	return &DatabaseMock_ListIntents_Call{Call: _e.mock.On("ListIntents", ctx)}
}

func (_c *DatabaseMock_ListIntents_Call) Run(run func(ctx context.Context)) *DatabaseMock_ListIntents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListIntents_Call) Return(intents []*models.Intent, err error) *DatabaseMock_ListIntents_Call {
	_c.Call.Return(intents, err)
	return _c
}

func (_c *DatabaseMock_ListIntents_Call) RunAndReturn(run func(ctx context.Context) ([]*models.Intent, error)) *DatabaseMock_ListIntents_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntentsByRecipient provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListIntentsByRecipient(ctx context.Context, recipient string) ([]*models.Intent, error) {
	ret := _mock.Called(ctx, recipient)

	if len(ret) == 0 {
		panic("no return value specified for ListIntentsByRecipient")
	}

	var r0 []*models.Intent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*models.Intent, error)); ok {
		return returnFunc(ctx, recipient)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*models.Intent); ok {
		r0 = returnFunc(ctx, recipient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, recipient)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_ListIntentsByRecipient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntentsByRecipient'
type DatabaseMock_ListIntentsByRecipient_Call struct {
	*mock.Call
}

// ListIntentsByRecipient is a helper method to define mock.On call
//   - ctx context.Context
//   - recipient string
func (_e *DatabaseMock_Expecter) ListIntentsByRecipient(ctx interface{}, recipient interface{}) *DatabaseMock_ListIntentsByRecipient_Call {
	return &DatabaseMock_ListIntentsByRecipient_Call{Call: _e.mock.On("ListIntentsByRecipient", ctx, recipient)}
}

func (_c *DatabaseMock_ListIntentsByRecipient_Call) Run(run func(ctx context.Context, recipient string)) *DatabaseMock_ListIntentsByRecipient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListIntentsByRecipient_Call) Return(intents []*models.Intent, err error) *DatabaseMock_ListIntentsByRecipient_Call {
	_c.Call.Return(intents, err)
	return _c
}

func (_c *DatabaseMock_ListIntentsByRecipient_Call) RunAndReturn(run func(ctx context.Context, recipient string) ([]*models.Intent, error)) *DatabaseMock_ListIntentsByRecipient_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntentsByRecipientPaginated provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListIntentsByRecipientPaginated(ctx context.Context, recipient string, page int, pageSize int) ([]*models.Intent, int, error) {
	ret := _mock.Called(ctx, recipient, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListIntentsByRecipientPaginated")
	}

	var r0 []*models.Intent
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.Intent, int, error)); ok {
		return returnFunc(ctx, recipient, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.Intent); ok {
		r0 = returnFunc(ctx, recipient, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = returnFunc(ctx, recipient, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = returnFunc(ctx, recipient, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListIntentsByRecipientPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntentsByRecipientPaginated'
type DatabaseMock_ListIntentsByRecipientPaginated_Call struct {
	*mock.Call
}

// ListIntentsByRecipientPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - recipient string
//   - page int
//   - pageSize int
func (_e *DatabaseMock_Expecter) ListIntentsByRecipientPaginated(ctx interface{}, recipient interface{}, page interface{}, pageSize interface{}) *DatabaseMock_ListIntentsByRecipientPaginated_Call {
	return &DatabaseMock_ListIntentsByRecipientPaginated_Call{Call: _e.mock.On("ListIntentsByRecipientPaginated", ctx, recipient, page, pageSize)}
}

func (_c *DatabaseMock_ListIntentsByRecipientPaginated_Call) Run(run func(ctx context.Context, recipient string, page int, pageSize int)) *DatabaseMock_ListIntentsByRecipientPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListIntentsByRecipientPaginated_Call) Return(intents []*models.Intent, n int, err error) *DatabaseMock_ListIntentsByRecipientPaginated_Call {
	_c.Call.Return(intents, n, err)
	return _c
}

func (_c *DatabaseMock_ListIntentsByRecipientPaginated_Call) RunAndReturn(run func(ctx context.Context, recipient string, page int, pageSize int) ([]*models.Intent, int, error)) *DatabaseMock_ListIntentsByRecipientPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntentsByRecipientPaginatedOptimized provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListIntentsByRecipientPaginatedOptimized(ctx context.Context, recipient string, page int, pageSize int) ([]*models.Intent, int, error) {
	ret := _mock.Called(ctx, recipient, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListIntentsByRecipientPaginatedOptimized")
	}

	var r0 []*models.Intent
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.Intent, int, error)); ok {
		return returnFunc(ctx, recipient, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.Intent); ok {
		r0 = returnFunc(ctx, recipient, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = returnFunc(ctx, recipient, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = returnFunc(ctx, recipient, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListIntentsByRecipientPaginatedOptimized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntentsByRecipientPaginatedOptimized'
type DatabaseMock_ListIntentsByRecipientPaginatedOptimized_Call struct {
	*mock.Call
}

// ListIntentsByRecipientPaginatedOptimized is a helper method to define mock.On call
//   - ctx context.Context
//   - recipient string
//   - page int
//   - pageSize int
func (_e *DatabaseMock_Expecter) ListIntentsByRecipientPaginatedOptimized(ctx interface{}, recipient interface{}, page interface{}, pageSize interface{}) *DatabaseMock_ListIntentsByRecipientPaginatedOptimized_Call {
	return &DatabaseMock_ListIntentsByRecipientPaginatedOptimized_Call{Call: _e.mock.On("ListIntentsByRecipientPaginatedOptimized", ctx, recipient, page, pageSize)}
}

func (_c *DatabaseMock_ListIntentsByRecipientPaginatedOptimized_Call) Run(run func(ctx context.Context, recipient string, page int, pageSize int)) *DatabaseMock_ListIntentsByRecipientPaginatedOptimized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListIntentsByRecipientPaginatedOptimized_Call) Return(intents []*models.Intent, n int, err error) *DatabaseMock_ListIntentsByRecipientPaginatedOptimized_Call {
	_c.Call.Return(intents, n, err)
	return _c
}

func (_c *DatabaseMock_ListIntentsByRecipientPaginatedOptimized_Call) RunAndReturn(run func(ctx context.Context, recipient string, page int, pageSize int) ([]*models.Intent, int, error)) *DatabaseMock_ListIntentsByRecipientPaginatedOptimized_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntentsBySender provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListIntentsBySender(ctx context.Context, sender string) ([]*models.Intent, error) {
	ret := _mock.Called(ctx, sender)

	if len(ret) == 0 {
		panic("no return value specified for ListIntentsBySender")
	}

	var r0 []*models.Intent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*models.Intent, error)); ok {
		return returnFunc(ctx, sender)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*models.Intent); ok {
		r0 = returnFunc(ctx, sender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, sender)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_ListIntentsBySender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntentsBySender'
type DatabaseMock_ListIntentsBySender_Call struct {
	*mock.Call
}

// ListIntentsBySender is a helper method to define mock.On call
//   - ctx context.Context
//   - sender string
func (_e *DatabaseMock_Expecter) ListIntentsBySender(ctx interface{}, sender interface{}) *DatabaseMock_ListIntentsBySender_Call {
	return &DatabaseMock_ListIntentsBySender_Call{Call: _e.mock.On("ListIntentsBySender", ctx, sender)}
}

func (_c *DatabaseMock_ListIntentsBySender_Call) Run(run func(ctx context.Context, sender string)) *DatabaseMock_ListIntentsBySender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListIntentsBySender_Call) Return(intents []*models.Intent, err error) *DatabaseMock_ListIntentsBySender_Call {
	_c.Call.Return(intents, err)
	return _c
}

func (_c *DatabaseMock_ListIntentsBySender_Call) RunAndReturn(run func(ctx context.Context, sender string) ([]*models.Intent, error)) *DatabaseMock_ListIntentsBySender_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntentsBySenderPaginated provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListIntentsBySenderPaginated(ctx context.Context, sender string, page int, pageSize int) ([]*models.Intent, int, error) {
	ret := _mock.Called(ctx, sender, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListIntentsBySenderPaginated")
	}

	var r0 []*models.Intent
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.Intent, int, error)); ok {
		return returnFunc(ctx, sender, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.Intent); ok {
		r0 = returnFunc(ctx, sender, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = returnFunc(ctx, sender, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = returnFunc(ctx, sender, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListIntentsBySenderPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntentsBySenderPaginated'
type DatabaseMock_ListIntentsBySenderPaginated_Call struct {
	*mock.Call
}

// ListIntentsBySenderPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - sender string
//   - page int
//   - pageSize int
func (_e *DatabaseMock_Expecter) ListIntentsBySenderPaginated(ctx interface{}, sender interface{}, page interface{}, pageSize interface{}) *DatabaseMock_ListIntentsBySenderPaginated_Call {
	return &DatabaseMock_ListIntentsBySenderPaginated_Call{Call: _e.mock.On("ListIntentsBySenderPaginated", ctx, sender, page, pageSize)}
}

func (_c *DatabaseMock_ListIntentsBySenderPaginated_Call) Run(run func(ctx context.Context, sender string, page int, pageSize int)) *DatabaseMock_ListIntentsBySenderPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListIntentsBySenderPaginated_Call) Return(intents []*models.Intent, n int, err error) *DatabaseMock_ListIntentsBySenderPaginated_Call {
	_c.Call.Return(intents, n, err)
	return _c
}

func (_c *DatabaseMock_ListIntentsBySenderPaginated_Call) RunAndReturn(run func(ctx context.Context, sender string, page int, pageSize int) ([]*models.Intent, int, error)) *DatabaseMock_ListIntentsBySenderPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntentsBySenderPaginatedOptimized provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListIntentsBySenderPaginatedOptimized(ctx context.Context, sender string, page int, pageSize int) ([]*models.Intent, int, error) {
	ret := _mock.Called(ctx, sender, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListIntentsBySenderPaginatedOptimized")
	}

	var r0 []*models.Intent
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.Intent, int, error)); ok {
		return returnFunc(ctx, sender, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.Intent); ok {
		r0 = returnFunc(ctx, sender, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = returnFunc(ctx, sender, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = returnFunc(ctx, sender, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListIntentsBySenderPaginatedOptimized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntentsBySenderPaginatedOptimized'
type DatabaseMock_ListIntentsBySenderPaginatedOptimized_Call struct {
	*mock.Call
}

// ListIntentsBySenderPaginatedOptimized is a helper method to define mock.On call
//   - ctx context.Context
//   - sender string
//   - page int
//   - pageSize int
func (_e *DatabaseMock_Expecter) ListIntentsBySenderPaginatedOptimized(ctx interface{}, sender interface{}, page interface{}, pageSize interface{}) *DatabaseMock_ListIntentsBySenderPaginatedOptimized_Call {
	return &DatabaseMock_ListIntentsBySenderPaginatedOptimized_Call{Call: _e.mock.On("ListIntentsBySenderPaginatedOptimized", ctx, sender, page, pageSize)}
}

func (_c *DatabaseMock_ListIntentsBySenderPaginatedOptimized_Call) Run(run func(ctx context.Context, sender string, page int, pageSize int)) *DatabaseMock_ListIntentsBySenderPaginatedOptimized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListIntentsBySenderPaginatedOptimized_Call) Return(intents []*models.Intent, n int, err error) *DatabaseMock_ListIntentsBySenderPaginatedOptimized_Call {
	_c.Call.Return(intents, n, err)
	return _c
}

func (_c *DatabaseMock_ListIntentsBySenderPaginatedOptimized_Call) RunAndReturn(run func(ctx context.Context, sender string, page int, pageSize int) ([]*models.Intent, int, error)) *DatabaseMock_ListIntentsBySenderPaginatedOptimized_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntentsKeysetPaginated provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListIntentsKeysetPaginated(ctx context.Context, lastTimestamp time.Time, lastID string, pageSize int, status string) ([]*models.Intent, bool, error) {
	ret := _mock.Called(ctx, lastTimestamp, lastID, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for ListIntentsKeysetPaginated")
	}

	var r0 []*models.Intent
	var r1 bool
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, string, int, string) ([]*models.Intent, bool, error)); ok {
		return returnFunc(ctx, lastTimestamp, lastID, pageSize, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, string, int, string) []*models.Intent); ok {
		r0 = returnFunc(ctx, lastTimestamp, lastID, pageSize, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, string, int, string) bool); ok {
		r1 = returnFunc(ctx, lastTimestamp, lastID, pageSize, status)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, time.Time, string, int, string) error); ok {
		r2 = returnFunc(ctx, lastTimestamp, lastID, pageSize, status)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListIntentsKeysetPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntentsKeysetPaginated'
type DatabaseMock_ListIntentsKeysetPaginated_Call struct {
	*mock.Call
}

// ListIntentsKeysetPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - lastTimestamp time.Time
//   - lastID string
//   - pageSize int
//   - status string
func (_e *DatabaseMock_Expecter) ListIntentsKeysetPaginated(ctx interface{}, lastTimestamp interface{}, lastID interface{}, pageSize interface{}, status interface{}) *DatabaseMock_ListIntentsKeysetPaginated_Call {
	return &DatabaseMock_ListIntentsKeysetPaginated_Call{Call: _e.mock.On("ListIntentsKeysetPaginated", ctx, lastTimestamp, lastID, pageSize, status)}
}

func (_c *DatabaseMock_ListIntentsKeysetPaginated_Call) Run(run func(ctx context.Context, lastTimestamp time.Time, lastID string, pageSize int, status string)) *DatabaseMock_ListIntentsKeysetPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListIntentsKeysetPaginated_Call) Return(intents []*models.Intent, b bool, err error) *DatabaseMock_ListIntentsKeysetPaginated_Call {
	_c.Call.Return(intents, b, err)
	return _c
}

func (_c *DatabaseMock_ListIntentsKeysetPaginated_Call) RunAndReturn(run func(ctx context.Context, lastTimestamp time.Time, lastID string, pageSize int, status string) ([]*models.Intent, bool, error)) *DatabaseMock_ListIntentsKeysetPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntentsPaginated provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListIntentsPaginated(ctx context.Context, page int, pageSize int, status string) ([]*models.Intent, int, error) {
	ret := _mock.Called(ctx, page, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for ListIntentsPaginated")
	}

	var r0 []*models.Intent
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, string) ([]*models.Intent, int, error)); ok {
		return returnFunc(ctx, page, pageSize, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, string) []*models.Intent); ok {
		r0 = returnFunc(ctx, page, pageSize, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, string) int); ok {
		r1 = returnFunc(ctx, page, pageSize, status)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int, string) error); ok {
		r2 = returnFunc(ctx, page, pageSize, status)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListIntentsPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntentsPaginated'
type DatabaseMock_ListIntentsPaginated_Call struct {
	*mock.Call
}

// ListIntentsPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
//   - status string
func (_e *DatabaseMock_Expecter) ListIntentsPaginated(ctx interface{}, page interface{}, pageSize interface{}, status interface{}) *DatabaseMock_ListIntentsPaginated_Call {
	return &DatabaseMock_ListIntentsPaginated_Call{Call: _e.mock.On("ListIntentsPaginated", ctx, page, pageSize, status)}
}

func (_c *DatabaseMock_ListIntentsPaginated_Call) Run(run func(ctx context.Context, page int, pageSize int, status string)) *DatabaseMock_ListIntentsPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListIntentsPaginated_Call) Return(intents []*models.Intent, n int, err error) *DatabaseMock_ListIntentsPaginated_Call {
	_c.Call.Return(intents, n, err)
	return _c
}

func (_c *DatabaseMock_ListIntentsPaginated_Call) RunAndReturn(run func(ctx context.Context, page int, pageSize int, status string) ([]*models.Intent, int, error)) *DatabaseMock_ListIntentsPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntentsPaginatedOptimized provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListIntentsPaginatedOptimized(ctx context.Context, page int, pageSize int, status string) ([]*models.Intent, int, error) {
	ret := _mock.Called(ctx, page, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for ListIntentsPaginatedOptimized")
	}

	var r0 []*models.Intent
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, string) ([]*models.Intent, int, error)); ok {
		return returnFunc(ctx, page, pageSize, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, string) []*models.Intent); ok {
		r0 = returnFunc(ctx, page, pageSize, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Intent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, string) int); ok {
		r1 = returnFunc(ctx, page, pageSize, status)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int, string) error); ok {
		r2 = returnFunc(ctx, page, pageSize, status)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListIntentsPaginatedOptimized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntentsPaginatedOptimized'
type DatabaseMock_ListIntentsPaginatedOptimized_Call struct {
	*mock.Call
}

// ListIntentsPaginatedOptimized is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
//   - status string
func (_e *DatabaseMock_Expecter) ListIntentsPaginatedOptimized(ctx interface{}, page interface{}, pageSize interface{}, status interface{}) *DatabaseMock_ListIntentsPaginatedOptimized_Call {
	return &DatabaseMock_ListIntentsPaginatedOptimized_Call{Call: _e.mock.On("ListIntentsPaginatedOptimized", ctx, page, pageSize, status)}
}

func (_c *DatabaseMock_ListIntentsPaginatedOptimized_Call) Run(run func(ctx context.Context, page int, pageSize int, status string)) *DatabaseMock_ListIntentsPaginatedOptimized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListIntentsPaginatedOptimized_Call) Return(intents []*models.Intent, n int, err error) *DatabaseMock_ListIntentsPaginatedOptimized_Call {
	_c.Call.Return(intents, n, err)
	return _c
}

func (_c *DatabaseMock_ListIntentsPaginatedOptimized_Call) RunAndReturn(run func(ctx context.Context, page int, pageSize int, status string) ([]*models.Intent, int, error)) *DatabaseMock_ListIntentsPaginatedOptimized_Call {
	_c.Call.Return(run)
	return _c
}

// ListSettlements provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListSettlements(ctx context.Context) ([]*models.Settlement, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSettlements")
	}

	var r0 []*models.Settlement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*models.Settlement, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*models.Settlement); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Settlement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_ListSettlements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSettlements'
type DatabaseMock_ListSettlements_Call struct {
	*mock.Call
}

// ListSettlements is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) ListSettlements(ctx interface{}) *DatabaseMock_ListSettlements_Call {
	return &DatabaseMock_ListSettlements_Call{Call: _e.mock.On("ListSettlements", ctx)}
}

func (_c *DatabaseMock_ListSettlements_Call) Run(run func(ctx context.Context)) *DatabaseMock_ListSettlements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListSettlements_Call) Return(settlements []*models.Settlement, err error) *DatabaseMock_ListSettlements_Call {
	_c.Call.Return(settlements, err)
	return _c
}

func (_c *DatabaseMock_ListSettlements_Call) RunAndReturn(run func(ctx context.Context) ([]*models.Settlement, error)) *DatabaseMock_ListSettlements_Call {
	_c.Call.Return(run)
	return _c
}

// ListSettlementsPaginated provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListSettlementsPaginated(ctx context.Context, page int, pageSize int) ([]*models.Settlement, int, error) {
	ret := _mock.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListSettlementsPaginated")
	}

	var r0 []*models.Settlement
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Settlement, int, error)); ok {
		return returnFunc(ctx, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*models.Settlement); ok {
		r0 = returnFunc(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Settlement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListSettlementsPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSettlementsPaginated'
type DatabaseMock_ListSettlementsPaginated_Call struct {
	*mock.Call
}

// ListSettlementsPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
func (_e *DatabaseMock_Expecter) ListSettlementsPaginated(ctx interface{}, page interface{}, pageSize interface{}) *DatabaseMock_ListSettlementsPaginated_Call {
	return &DatabaseMock_ListSettlementsPaginated_Call{Call: _e.mock.On("ListSettlementsPaginated", ctx, page, pageSize)}
}

func (_c *DatabaseMock_ListSettlementsPaginated_Call) Run(run func(ctx context.Context, page int, pageSize int)) *DatabaseMock_ListSettlementsPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListSettlementsPaginated_Call) Return(settlements []*models.Settlement, n int, err error) *DatabaseMock_ListSettlementsPaginated_Call {
	_c.Call.Return(settlements, n, err)
	return _c
}

func (_c *DatabaseMock_ListSettlementsPaginated_Call) RunAndReturn(run func(ctx context.Context, page int, pageSize int) ([]*models.Settlement, int, error)) *DatabaseMock_ListSettlementsPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// ListSettlementsPaginatedOptimized provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) ListSettlementsPaginatedOptimized(ctx context.Context, page int, pageSize int) ([]*models.Settlement, int, error) {
	ret := _mock.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListSettlementsPaginatedOptimized")
	}

	var r0 []*models.Settlement
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Settlement, int, error)); ok {
		return returnFunc(ctx, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*models.Settlement); ok {
		r0 = returnFunc(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Settlement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DatabaseMock_ListSettlementsPaginatedOptimized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSettlementsPaginatedOptimized'
type DatabaseMock_ListSettlementsPaginatedOptimized_Call struct {
	*mock.Call
}

// ListSettlementsPaginatedOptimized is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
func (_e *DatabaseMock_Expecter) ListSettlementsPaginatedOptimized(ctx interface{}, page interface{}, pageSize interface{}) *DatabaseMock_ListSettlementsPaginatedOptimized_Call {
	return &DatabaseMock_ListSettlementsPaginatedOptimized_Call{Call: _e.mock.On("ListSettlementsPaginatedOptimized", ctx, page, pageSize)}
}

func (_c *DatabaseMock_ListSettlementsPaginatedOptimized_Call) Run(run func(ctx context.Context, page int, pageSize int)) *DatabaseMock_ListSettlementsPaginatedOptimized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *DatabaseMock_ListSettlementsPaginatedOptimized_Call) Return(settlements []*models.Settlement, n int, err error) *DatabaseMock_ListSettlementsPaginatedOptimized_Call {
	_c.Call.Return(settlements, n, err)
	return _c
}

func (_c *DatabaseMock_ListSettlementsPaginatedOptimized_Call) RunAndReturn(run func(ctx context.Context, page int, pageSize int) ([]*models.Settlement, int, error)) *DatabaseMock_ListSettlementsPaginatedOptimized_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) Ping() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DatabaseMock_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type DatabaseMock_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *DatabaseMock_Expecter) Ping() *DatabaseMock_Ping_Call {
	return &DatabaseMock_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *DatabaseMock_Ping_Call) Run(run func()) *DatabaseMock_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseMock_Ping_Call) Return(err error) *DatabaseMock_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DatabaseMock_Ping_Call) RunAndReturn(run func() error) *DatabaseMock_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareStatements provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) PrepareStatements(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PrepareStatements")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DatabaseMock_PrepareStatements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareStatements'
type DatabaseMock_PrepareStatements_Call struct {
	*mock.Call
}

// PrepareStatements is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) PrepareStatements(ctx interface{}) *DatabaseMock_PrepareStatements_Call {
	return &DatabaseMock_PrepareStatements_Call{Call: _e.mock.On("PrepareStatements", ctx)}
}

func (_c *DatabaseMock_PrepareStatements_Call) Run(run func(ctx context.Context)) *DatabaseMock_PrepareStatements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DatabaseMock_PrepareStatements_Call) Return(err error) *DatabaseMock_PrepareStatements_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DatabaseMock_PrepareStatements_Call) RunAndReturn(run func(ctx context.Context) error) *DatabaseMock_PrepareStatements_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) Query(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sql.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.Rows, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DatabaseMock_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type DatabaseMock_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *DatabaseMock_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *DatabaseMock_Query_Call {
	return &DatabaseMock_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *DatabaseMock_Query_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *DatabaseMock_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *DatabaseMock_Query_Call) Return(rows *sql.Rows, err error) *DatabaseMock_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *DatabaseMock_Query_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)) *DatabaseMock_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) QueryRow(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *sql.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}
	return r0
}

// DatabaseMock_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type DatabaseMock_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *DatabaseMock_Expecter) QueryRow(ctx interface{}, query interface{}, args ...interface{}) *DatabaseMock_QueryRow_Call {
	return &DatabaseMock_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *DatabaseMock_QueryRow_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *DatabaseMock_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *DatabaseMock_QueryRow_Call) Return(row *sql.Row) *DatabaseMock_QueryRow_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *DatabaseMock_QueryRow_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) *sql.Row) *DatabaseMock_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIntentStatus provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) UpdateIntentStatus(ctx context.Context, id string, status models.IntentStatus) error {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIntentStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, models.IntentStatus) error); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DatabaseMock_UpdateIntentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIntentStatus'
type DatabaseMock_UpdateIntentStatus_Call struct {
	*mock.Call
}

// UpdateIntentStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - status models.IntentStatus
func (_e *DatabaseMock_Expecter) UpdateIntentStatus(ctx interface{}, id interface{}, status interface{}) *DatabaseMock_UpdateIntentStatus_Call {
	return &DatabaseMock_UpdateIntentStatus_Call{Call: _e.mock.On("UpdateIntentStatus", ctx, id, status)}
}

func (_c *DatabaseMock_UpdateIntentStatus_Call) Run(run func(ctx context.Context, id string, status models.IntentStatus)) *DatabaseMock_UpdateIntentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 models.IntentStatus
		if args[2] != nil {
			arg2 = args[2].(models.IntentStatus)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *DatabaseMock_UpdateIntentStatus_Call) Return(err error) *DatabaseMock_UpdateIntentStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DatabaseMock_UpdateIntentStatus_Call) RunAndReturn(run func(ctx context.Context, id string, status models.IntentStatus) error) *DatabaseMock_UpdateIntentStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastProcessedBlock provides a mock function for the type DatabaseMock
func (_mock *DatabaseMock) UpdateLastProcessedBlock(ctx context.Context, chainID uint64, blockNumber uint64) error {
	ret := _mock.Called(ctx, chainID, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastProcessedBlock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64, uint64) error); ok {
		r0 = returnFunc(ctx, chainID, blockNumber)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DatabaseMock_UpdateLastProcessedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastProcessedBlock'
type DatabaseMock_UpdateLastProcessedBlock_Call struct {
	*mock.Call
}

// UpdateLastProcessedBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - chainID uint64
//   - blockNumber uint64
func (_e *DatabaseMock_Expecter) UpdateLastProcessedBlock(ctx interface{}, chainID interface{}, blockNumber interface{}) *DatabaseMock_UpdateLastProcessedBlock_Call {
	return &DatabaseMock_UpdateLastProcessedBlock_Call{Call: _e.mock.On("UpdateLastProcessedBlock", ctx, chainID, blockNumber)}
}

func (_c *DatabaseMock_UpdateLastProcessedBlock_Call) Run(run func(ctx context.Context, chainID uint64, blockNumber uint64)) *DatabaseMock_UpdateLastProcessedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *DatabaseMock_UpdateLastProcessedBlock_Call) Return(err error) *DatabaseMock_UpdateLastProcessedBlock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DatabaseMock_UpdateLastProcessedBlock_Call) RunAndReturn(run func(ctx context.Context, chainID uint64, blockNumber uint64) error) *DatabaseMock_UpdateLastProcessedBlock_Call {
	_c.Call.Return(run)
	return _c
}
